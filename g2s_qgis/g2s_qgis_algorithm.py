# -*- coding: utf-8 -*-

"""
/***************************************************************************
 G2S
								 A QGIS plugin
 Interface G2S
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin                : 2019-10-31
		copyright            : (C) 2019 by Mathieu Gravey @ The University of Lausanne
		email                : mathieu.gravey@unil.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Mathieu Gravey @ The University of Lausanne'
__date__ = '2019-10-31'
__copyright__ = '(C) 2019 by Mathieu Gravey @ The University of Lausanne'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (Qgis,QgsProcessing,
						QgsMessageLog,
						QgsFeatureSink,
						QgsProcessingAlgorithm,
						QgsProcessingParameterRasterLayer,
						QgsProcessingParameterRasterDestination,
						QgsProcessingParameterEnum,
						QgsProcessingParameterNumber,
						QgsProcessingParameterString,
						QgsProcessingParameterBoolean,
						QgsProcessingParameterBand,
						QgsProcessingParameterDefinition,
						QgsProcessingMultiStepFeedback
						)

import gdal
import sys
import pathlib
import numpy
from time import sleep
from scipy import ndimage

if not ('g2s' in sys.modules):
	import subprocess
	import os
	interpreterDirectory=os.path.join(os.__file__.split("lib/")[0],"bin");
	interpreterPath=os.path.join(interpreterDirectory,[s for s in os.listdir(interpreterDirectory) if "python" in s][0]);
	subprocess.call([interpreterPath, '-m', 'pip', 'install', 'G2S'])
	
from g2s import run as g2s


class G2SAlgorithm(QgsProcessingAlgorithm):
	"""
	This is an example algorithm that takes a vector layer and
	creates a new identical one.

	It is meant to be used as an example of how to create your own
	algorithms and explain methods and variables used to do it. An
	algorithm like this will be available in all elements, and there
	is not need for additional work.

	All Processing algorithms should extend the QgsProcessingAlgorithm
	class.
	"""

	# Constants used to refer to parameters and outputs. They will be
	# used when calling the algorithm from another algorithm, or when
	# calling from the QGIS console.

	OUTPUT = 'OUTPUT'
	INPUT = 'INPUT'
	TI='TI'

	BANDS_TI='BANDS_TI'
	BANDS_INPUT='BANDS_INPUT'
	KERNEL_TYPE='KERNEL_TYPE'
	KERNEL_ALPHA='KERNEL_ALPHA'
	PARAM_K='PARAM_K'
	PARAM_N='PARAM_N'
	PARAM_J='PARAM_J'
	PARAM_SA='PARAM_SA'
	PARAM_IGNORE_RESOLUTION='PARAM_IGNORE_RESOLUTION'


	def initAlgorithm(self, config):
		"""
		Here we define the inputs and output of the algorithm, along
		with some other properties.
		"""

		# We add the input vector features source. It can have any kind of
		# geometry.

		self.addParameter(
			QgsProcessingParameterRasterLayer(
				self.TI,
				self.tr('Training raster')
			)
		)

		self.addParameter(
			QgsProcessingParameterBand(self.BANDS_TI,
				self.tr('Selected band(s)'),
				None,
				self.TI,
				allowMultiple=True
			)
		)


		self.addParameter(
			QgsProcessingParameterRasterLayer(
				self.INPUT,
				self.tr('Raster on which to simulate')
			)
		)

		self.addParameter(
			QgsProcessingParameterBand(self.BANDS_INPUT,
				self.tr('Selected band(s)'),
				None,
				self.INPUT,
				allowMultiple=True
			)
		)

	
		# We add a feature sink in which to store our processed features (this
		# usually takes the form of a newly created vector layer when the
		# algorithm is run in QGIS).
		self.addParameter(
			QgsProcessingParameterRasterDestination(
				self.OUTPUT,
				self.tr('QS simulation')
			)
		)

		self.addParameter(
			QgsProcessingParameterNumber(
				self.PARAM_K,
				self.tr('Parameter k'),
				QgsProcessingParameterNumber.Double,
				1.2,
				minValue=1,
			)
		)

		self.addParameter(
			QgsProcessingParameterNumber(
				self.PARAM_N,
				self.tr('Parameter N'),
				QgsProcessingParameterNumber.Integer,
				30,
				minValue=1,
			)
		)

		self.addParameter(
			QgsProcessingParameterEnum(
				self.KERNEL_TYPE,
				self.tr('Type of kernel'),
				[self.tr('Uniform'),
				self.tr('Exponential'),
				self.tr('Gaussian')],
				defaultValue=0,
				optional=True
			)
		)

		self.addParameter(
			QgsProcessingParameterNumber(
				self.KERNEL_ALPHA,
				self.tr('Kernel Alpha OR Max radius'),
				QgsProcessingParameterNumber.Double,
				1,
				minValue=0.001,
				optional=True
			)
		)

		paramj=QgsProcessingParameterNumber(
			self.PARAM_J ,
			self.tr('Parallelization, interger for number of cores, and decimal ]0,1[, for porcentage of total cores'),
			QgsProcessingParameterNumber.Double,
			0.5,
			minValue=0.001,
			optional=True
		)
		paramj.setFlags(paramj.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
		

	
		paramSA=QgsProcessingParameterString(
			self.PARAM_SA ,
			self.tr('DNS name or IP of the G2S server'),
			'localhost',
			optional=True
		)
		paramSA.setFlags(paramSA.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
		

		
		ignoreResolution=QgsProcessingParameterBoolean(
			self.PARAM_IGNORE_RESOLUTION ,
			self.tr('ignore resolution check'),
			False,
			optional=True
		)
		ignoreResolution.setFlags(ignoreResolution.flags() | QgsProcessingParameterDefinition.FlagAdvanced)

		self.addParameter(paramj)
		self.addParameter(paramSA)
		self.addParameter(ignoreResolution)
		

	def checkParameterValues(self, parameters, context):
		tiBands=numpy.array(self.parameterAsInts(parameters, self.BANDS_TI, context), dtype=int);
		diBands=numpy.array(self.parameterAsInts(parameters, self.BANDS_INPUT, context), dtype=int);
		if(tiBands.size<diBands.size):
			return False, self.tr('Training image require at least the same amount of bands that the simulation grid')
		serverAddress=self.parameterAsString(parameters, self.PARAM_SA, context);
		if(not(serverAddress) or serverAddress==''):
			serverAddress='localhost';
		if(g2s('-sa',serverAddress,'-serverStatus')<=0):
			return False, self.tr('no G2S server available at this address');
		# newField = self.parameterAsBool(parameters, self.NEW_FIELD, context)
		# fieldName = self.parameterAsString(parameters, self.FIELD_NAME, context).strip()
		# if newField and len(fieldName) == 0:
		#     return False, self.tr('Field name is not set. Please enter a field name')
		return super(G2SAlgorithm, self).checkParameterValues(parameters, context)

	def processAlgorithm(self, parameters, context, model_feedback):
		"""
		Here is where the processing itself takes place.
		"""
		feedback = QgsProcessingMultiStepFeedback(100, model_feedback)
		# Retrieve the feature source and sink. The 'dest_id' variable is used
		# to uniquely identify the feature sink, and must be included in the
		# dictionary returned by the processAlgorithm function.
		ti = self.parameterAsRasterLayer(parameters, self.TI, context)
		pixelSize=ti.rasterUnitsPerPixelX();
		source = self.parameterAsRasterLayer(parameters, self.INPUT, context)
		output=self.parameterAsOutputLayer(parameters, self.OUTPUT, context);
		k=self.parameterAsDouble(parameters, self.PARAM_K, context);
		n=self.parameterAsInt(parameters, self.PARAM_N, context);
		kernelType=self.parameterAsEnum(parameters, self.KERNEL_TYPE, context);
		alpha=self.parameterAsDouble(parameters, self.KERNEL_ALPHA, context);

		tiBands=numpy.array(self.parameterAsInts(parameters, self.BANDS_TI, context), dtype=int);
		diBands=numpy.array(self.parameterAsInts(parameters, self.BANDS_INPUT, context), dtype=int);

		jValue=self.parameterAsDouble(parameters, self.PARAM_J, context);
		serverAddress=self.parameterAsString(parameters, self.PARAM_SA, context);
		ignoreResolution=self.parameterAsBool(parameters, self.PARAM_IGNORE_RESOLUTION, context);

		if(not(serverAddress) or serverAddress==''):
			serverAddress='localhost';

		#QgsMessageLog.logMessage(str(tiBands), 'G2S');
		#QgsMessageLog.logMessage(ti.bandName(2), 'G2S');
		#QgsMessageLog.logMessage(source.bandName(3), 'G2S');

		tiGDAL = gdal.Open(ti.source())
		diGDAL = gdal.Open(source.source())

		if(not(ignoreResolution) and (abs(ti.rasterUnitsPerPixelX()-source.rasterUnitsPerPixelX())+abs(ti.rasterUnitsPerPixelY()-source.rasterUnitsPerPixelY()))>0.05*ti.rasterUnitsPerPixelX()):
			QgsMessageLog.logMessage("Resolution are too different please reproject first", 'G2S',level=Qgis.Critical);
			return {}

		# do mapping
		# di=numpy.zeros((diGDAL.GetRasterBand(1).ReadAsArray().shape)+(tiGDAL.RasterCount,))*numpy.nan;
		# ti=numpy.zeros((tiGDAL.GetRasterBand(1).ReadAsArray().shape)+(tiGDAL.RasterCount,))*numpy.nan;
		# atLeatOneMatchingName=False;

		# for y in tiBands:
		# 	ti[:,:,y-1]=tiGDAL.GetRasterBand(y).ReadAsArray();

		# for x in range(1,diGDAL.RasterCount):
		# 	for y in range(1,tiGDAL.RasterCount):
		# 		tiName=tiGDAL.GetRasterBand(y).GetDescription();
		# 		diName=diGDAL.GetRasterBand(x).GetDescription();
		# 		if(diName==tiName and tiName!='' and tiName!=None):
		# 			di[:,:,y-1]=diGDAL.GetRasterBand(x).ReadAsArray();
		# 			atLeatOneMatchingName=True;

		# if not(atLeatOneMatchingName):
		# 	for x in range(1,diGDAL.RasterCount):
		# 		di[:,:,x-1]=diGDAL.GetRasterBand(x).ReadAsArray();

		# create numpy array and load data
		di=numpy.zeros((diGDAL.GetRasterBand(1).ReadAsArray().shape)+(tiBands.size,))*numpy.nan;
		ti=numpy.zeros((tiGDAL.GetRasterBand(1).ReadAsArray().shape)+(tiBands.size,))*numpy.nan;

		for y in range(0,tiBands.size):
			ti[:,:,y]=tiGDAL.GetRasterBand(int(tiBands[y])).ReadAsArray();
		for x in range(0,diBands.size):
			di[:,:,x]=diGDAL.GetRasterBand(int(diBands[x])).ReadAsArray();

		#check for missing bands in the TI
		numberOfDataProLayer=numpy.sum(numpy.logical_not(numpy.isnan(ti)),axis=(0,1))
		if(numpy.min(numberOfDataProLayer)==0):
			QgsMessageLog.logMessage("Some layers of the training image don't have data, please remove them.", 'G2S',level=Qgis.Critical);
			# QgsMessageLog.logMessage("Some layers of the training image don't have data, please remove them or select the appropriated option", 'G2S',level=Qgis.Critical);
			return {}

		#check for nan padding in the ti
		dataMaskTi=numpy.logical_not(numpy.min(numpy.isnan(ti),axis=2));
		true_points = numpy.argwhere(dataMaskTi)
		top_left = true_points.min(axis=0)
		bottom_right = true_points.max(axis=0)
		ti=ti[top_left[0]:bottom_right[0]+1,top_left[1]:bottom_right[1]+1,:].copy();

		#generate the appropiate kernel
		sizeKernel=numpy.array(ti.shape)//4;

		maxKernel=numpy.pad(numpy.ones(shape=(1,1,2)),((sizeKernel[0],),(sizeKernel[1],),(0,)),'constant');
		distKernel=pixelSize*ndimage.morphology.distance_transform_edt(1-maxKernel);

		if kernelType==0: #Uniform
			kernel=distKernel<=alpha;
			pass
		if kernelType==1: #Exponential
			kernel=numpy.exp(-alpha*distKernel);
			pass
		if kernelType==2: #Gaussian
			kernel=numpy.exp(-alpha*distKernel**2);
			pass

		kernel[kernel<0.01]=0;

		# argwhere will give you the coordinates of every non-zero point
		true_points = numpy.argwhere(kernel)
		# take the smallest points and use them as the top left of your crop
		top_left = true_points.min(axis=0)
		# take the largest points and use them as the bottom right of your crop
		bottom_right = true_points.max(axis=0)

		kernel=kernel[top_left[0]:bottom_right[0]+1,top_left[1]:bottom_right[1]+1,:].copy();

		# QgsMessageLog.logMessage(str(kernel.shape), 'G2S')
		# QgsMessageLog.logMessage(str(ti.shape), 'G2S')
		# QgsMessageLog.logMessage(str(di.shape), 'G2S')
		# QgsMessageLog.logMessage(str(numpy.zeros(shape=(tiBands.size,)).shape), 'G2S')

		feedback.setCurrentStep(0);

		id=g2s('-sa',serverAddress,'-a','qs','-ti',ti,'-di',di,'-dt',numpy.zeros(shape=(ti.shape[2],)),'-ki',kernel,'-j',jValue,'-k',k,'-n',n,'-submitOnly','-noTO');

		stop=False;

		while not(stop) :
			sleep(0.1) # Time in seconds
			progress=g2s('-sa',serverAddress,'-statusOnly',id);
			if(isinstance(progress, float)):
				feedback.setCurrentStep(progress);
			else:
				break;
			if(progress>=99):
				stop=True;
			if model_feedback.isCanceled():
				g2s('-sa',serverAddress,'-kill',id); 
				return {}

		arr=g2s('-sa',serverAddress,'-waitAndDownload',id); 

		feedback.setCurrentStep(100);

		driver = gdal.GetDriverByName("GTiff")
		outdata = driver.Create(output, arr[0].shape[1], arr[0].shape[0], arr[0].shape[2], tiGDAL.GetRasterBand(1).DataType )
		outdata.SetGeoTransform(diGDAL.GetGeoTransform())##sets same geotransform as input
		outdata.SetProjection(diGDAL.GetProjection())##sets same projection as input
		for y in range(0,arr[0].shape[2]):
			# QgsMessageLog.logMessage(str(y), 'G2S');
			outdata.GetRasterBand(y+1).WriteArray(arr[0][:,:,y].copy())
		#outdata.GetRasterBand(1).SetNoDataValue(10000)##if you want these values transparent
		outdata.FlushCache() ##saves to disk!!

		# (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
		# 		context, source.fields(), source.wkbType(), source.sourceCrs())

		# Compute the number of steps to display within the progress bar and
		# get features from source

		# Return the results of the algorithm. In this case our only result is
		# the feature sink which contains the processed features, but some
		# algorithms may return multiple feature sinks, calculated numeric
		# statistics, etc. These should all be included in the returned
		# dictionary, with keys matching the feature corresponding parameter
		# or output names.

		return {self.OUTPUT: output}

	def name(self):
		"""
		Returns the algorithm name, used for identifying the algorithm. This
		string should be fixed for the algorithm, and must not be localised.
		The name should be unique within each provider. Names should contain
		lowercase alphanumeric characters only and no spaces or other
		formatting characters.
		"""
		return 'Quantile Sampling'

	def displayName(self):
		"""
		Returns the translated algorithm name, which should be used for any
		user-visible display of the algorithm name.
		"""
		return self.tr(self.name())

	def group(self):
		"""
		Returns the name of the group this algorithm belongs to. This string
		should be localised.
		"""
		return self.tr(self.groupId())

	def groupId(self):
		"""
		Returns the unique ID of the group this algorithm belongs to. This
		string should be fixed for the algorithm, and must not be localised.
		The group id should be unique within each provider. Group id should
		contain lowercase alphanumeric characters only and no spaces or other
		formatting characters.
		"""
		return 'Raster enhancer'

	def tr(self, string):
		return QCoreApplication.translate('Processing', string)

	def createInstance(self):
		return G2SAlgorithm()
